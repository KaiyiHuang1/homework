class NumMatrix {
    private int[][] preprocess;
    public NumMatrix(int[][] matrix) {//add extra row and extra col on top and left to save some corner case check time
        preprocess = new int[matrix.length][matrix[0].length];
        preprocess[0][0] = matrix[0][0];
        for(int i = 1; i < matrix.length; i++){
            preprocess[i][0] = matrix[i][0] + preprocess[i - 1][0];
        }
        for(int j = 1; j < matrix[0].length; j++){
            preprocess[0][j] = matrix[0][j] + preprocess[0][j - 1];
        }
        for(int i = 1; i< matrix.length; i++){
            for(int j = 1; j < matrix[0].length; j++){
                preprocess[i][j] = preprocess[i][j - 1] + preprocess[i - 1][j] - preprocess[i - 1][j - 1] + matrix[i][j];
            }
        }
        /*for(int i = 0; i< matrix.length; i++){
            System.out.println();
            for(int j = 0; j < matrix[0].length; j++){
                System.out.print(preprocess[i][j]);
                System.out.print("-");
            }
        }*/

    }

    public int sumRegion(int row1, int col1, int row2, int col2) {
        int total = preprocess[row2][col2];
        int sub1 = row1 - 1 >= 0? preprocess[row1 - 1][col2] : 0;
        int sub2 = col1 - 1 >= 0? preprocess[row2][col1 - 1]:0;
        int sub3 = (row1 - 1 >= 0 && col1 - 1 >= 0) ? preprocess[row1 - 1][col1 - 1]:0;
        return total - sub1 - sub2 + sub3;
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * int param_1 = obj.sumRegion(row1,col1,row2,col2);
 */