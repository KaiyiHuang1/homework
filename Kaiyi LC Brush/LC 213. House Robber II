class Solution {
    public int rob(int[] nums) {
        //corner case
        if(nums.length == 1) return nums[0];

        return Math.max(rob(nums, 0 , nums.length - 2), rob(nums, 1, nums.length - 1));
    }

    public int rob(int[] nums, int left, int right){
        //corner case
        if(left > right) return -1;
        if(left == right) return nums[left];

        int arraylen = right - left + 1;
        int[] dp = new int[arraylen + 1];//array len is right - left + 1, extra space for extra 0
        dp[0] = 0;
        dp[1] = nums[left];
        for(int i = 2; i <= arraylen; i++){
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[left + i - 1]);//need to be careful when it comes to nums[]
        }
        return dp[arraylen];
    }
}
/*    public int rob(int[] nums) {
        //conrer case

        int rob = nums[0];//first valid value
        int notRob = 0;//first valid value
        for(int i = 1; i < nums.length; i++){
            int temp = rob;
            rob = Math.max(nums[i] + notRob, temp);
            notRob = temp;
        }
        return rob;
    }//use this version to decrease space complexity*/