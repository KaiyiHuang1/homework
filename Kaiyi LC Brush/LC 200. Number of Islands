class Solution {
    int[][] dirs = {{0, 1},{1, 0},{-1, 0}, {0, -1}};//only look at right and down
    public int numIslands(char[][] grid) {//whenever find a new place with 1, turn all the connected 1s to another number cause they are the same island
        //corner case
        if(grid == null ||grid.length == 0) return 0;
        int count = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == '1'){
                    count++;
                    DFS(grid, i, j);
                }
            }
        }
        return count;
    }

    public void DFS(char[][] grid, int r, int c){
        grid[r][c] = '2';
        for(int[] dir: dirs){
            int newR = r + dir[0];
            int newC = c + dir[1];
            if(newR >= 0 && newR < grid.length && newC >= 0 && newC < grid[0].length && grid[newR][newC] == '1'){
                DFS(grid, newR, newC);
            }
        }
    }
}